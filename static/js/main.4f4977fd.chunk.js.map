{"version":3,"sources":["Answer.js","findLongestSentence.js","App.js","serviceWorker.js","index.js"],"names":["Answer","_ref","answer","length","charLength","message","concat","react_default","a","createElement","map","sentence","i","key","findLongestSentence","inputText","setLongestSentences","splitText","match","splitInputTextByStopPunctuation","toBeSplicedIndices","fullSentence","slice","join","splice","spliceSentences","sentences","forEach","push","isEndingInNumber","hasDecimalPlaces","isEndingInInitial","isInitial","generateIndicesOfSentencesToSplice","longestSentences","maxLength","getLongestSentences","window","alert","App","_useState","useState","_useState2","Object","slicedToArray","updateInputText","_useState3","_useState4","updateAnswer","className","htmlFor","id","name","rows","cols","onChange","event","target","value","type","onClick","src_Answer","Boolean","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4f4977fd.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\n\nconst Answer = ({ answer }) => {\n  const { length } = answer;\n  if (length === 0) return null;\n  const charLength = answer[0].length;\n  let message = '';\n  if (length > 1) message += 'It\\'s a tie! The longest sentences have ';\n  else message += 'The longest sentence has ';\n  message += `${charLength} characters.\\n`;\n  message += length > 1 ? 'They are:\\n' : 'It is:\\n';\n  return (\n    <div>\n      <p>\n        {message}\n      </p>\n      <ul>\n        {answer.map((sentence, i) => (\n          <li key={i}>\n            {sentence}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nAnswer.propTypes = {\n  answer: PropTypes.arrayOf(PropTypes.string).isRequired\n};\n\n\nexport default Answer;\n","\n// Zero or one open parenthesis\n// One or more of anything that is not '(.?!'\n// '.!?'\n// Zero or one closed parenthesis\nexport const splitInputTextByStopPunctuation = inputText =>\n  inputText.match(/[^.?!]+[.!?]+[\\])'\"`’”]*/g);\n\nexport const generateIndicesOfSentencesToSplice = (sentences) => {\n  let toBeSplicedIndices = [];\n  sentences.forEach((sentence, i) => {\n    const isEndingWithTitle = !!sentence.match(/[ ]+[A-Z][a-z]{0,2}\\./);\n    if (isEndingWithTitle) {\n      toBeSplicedIndices.push(i);\n    } else {\n      const isEndingInNumber = !!sentence.match(/\\d\\.$/);\n      const hasDecimalPlaces = i < sentences.length - 1 ? !!sentences[i + 1].match(/^\\d/) : false;\n      if (isEndingInNumber && hasDecimalPlaces) {\n        toBeSplicedIndices.push(i);\n      } else {\n        const isEndingInInitial = !!sentence.match(/[ ][a-zA-Z]\\.$/);\n        const isInitial = !!sentence.match(/^[a-zA-Z]\\.$/) && i < sentences.length - 1;\n        const isInitialism = isEndingInInitial || isInitial;\n        if (isInitialism) toBeSplicedIndices.push(i);\n      }\n    }\n  });\n  return toBeSplicedIndices;\n}\n\nexport const spliceSentences = (splitText, toBeSplicedIndices) => {\n  for (let i = toBeSplicedIndices.length - 1; i >= 0; i -= 1) {\n    if (i !== toBeSplicedIndices.length - 1 || toBeSplicedIndices[i] < splitText.length - 1) {\n      const fullSentence = splitText.slice(toBeSplicedIndices[i], toBeSplicedIndices[i] + 2).join('');\n      splitText.splice(toBeSplicedIndices[i], 2, fullSentence);\n    }\n  }\n}\n\nexport const getLongestSentences = splitText => {\n  let longestSentences =  [''];\n  let maxLength = 0;\n  splitText.forEach(sentence => {\n    const isBigger = sentence.length > maxLength;\n    if (isBigger) {\n      maxLength = sentence.length;\n      longestSentences = [sentence];\n    } else {\n      const isEqual = sentence.length === maxLength;\n      if (isEqual) {\n        longestSentences.push(sentence);\n      }\n    }\n  });\n  return longestSentences;\n}\n\n\nconst findLongestSentence = (inputText, setLongestSentences) => {\n  const splitText = splitInputTextByStopPunctuation(inputText);\n  if (!splitText) {\n    window.alert('You must enter at least one sentence');\n    return;\n  }\n\n  const toBeSplicedIndices = generateIndicesOfSentencesToSplice(splitText);\n\n  spliceSentences(splitText, toBeSplicedIndices);\n\n  const longestSentences = getLongestSentences(splitText);\n\n  setLongestSentences(longestSentences);\n}\n\nexport default findLongestSentence;\n","import React, { useState } from 'react';\n\nimport Answer from './Answer';\nimport findLongestSentence from './findLongestSentence';\nimport './App.css';\n\nconst App = () => {\n  const [inputText, updateInputText] = useState('');\n  const [answer, updateAnswer] = useState([]);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>\n          Longest Sentence Finder\n        </h1>\n      </header>\n\n      <label htmlFor=\"input\">\n        Paste text here:\n      </label>\n      <br />\n      <textarea\n        id=\"input\"\n        name=\"input\"\n        rows={20}\n        cols={100}\n        onChange={\n          (event) => updateInputText(event.target.value)\n        }\n      />\n      <br />\n      <br />\n      <button type=\"button\" onClick={() => findLongestSentence(inputText, updateAnswer)}>\n        Find the longest sentence!\n      </button>\n      <Answer answer={answer} />\n      <footer className=\"footer\">\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}